######################################
##      USER DEFINED PARAMETERS     ##
######################################

$cdmsInstance = "NY5PCDMSDB17"
$startDate = [DateTime]"2024-02-01"
$endDate = [DateTime]"2024-11-21 17:20:17"
$pesRegion = "na"
$backfillDir = "V:\DMS_Data04\pes_backfill\na"
$batchSize = 10000

try {
    Invoke-Sqlcmd -ServerInstance $cdmsInstance -Database "xyz_cms_common" -Query "SELECT 1"
} catch {
    Write-Output "Failed to connect to server=${cdmsInstance}"
    continue
}

######################################
##      START BACKFILL PROCESS      ##
######################################

$custId = "684"
$custDbName = "xyz_dms_cust_$custId"
$eventQuery = @"
    SELECT 
        MIN(b.bounce_id) AS min_event_id,
        MAX(b.bounce_id) AS max_event_id
    FROM dbo.t_msg_bounce b WITH (NOLOCK)
    INNER JOIN dbo.t_bounce_category bc WITH (NOLOCK)
        ON b.category_id = bc.category_id
    WHERE b.bounce_time BETWEEN '$startDate' AND '$endDate'
        AND bc.hard_flag IN (0, 2);
"@

$minMaxResult = Invoke-Sqlcmd -ServerInstance $cdmsInstance -Database $custDbName -Query $eventQuery
$minEventId = $minMaxResult.min_event_id
$maxEventId = $minMaxResult.max_event_id

if ([string]::IsNullOrWhiteSpace($minEventId) -or [string]::IsNullOrWhiteSpace($maxEventId)) {
    Write-Output "There is no data to backfill for cust_id=${custId}, server=${cdmsInstance}"
    continue
}

$batchNum = 1
$campIds = "1094,1117,1286,1314,1351,1352,1353,1361,1362,1386,1387,1393,1394,1404,1405,1417,1432,1464,1481,1492,1521,1526,1527,1576,1582,1583,1602,1622,1656,1657,1658,1659,1708,1709,1710,1711,1733,1734,1735,1769,1770,1771,1804,1805,1910,2032,2033,2078,2079,2083,2084,2085,2092,2093,2108,2109,2123,2138,2153,2154,2171,2172,2234,2235,2237,2238,2302,2303,2305,2306,2316,2332,2333,2371,2372,2374,2375,2396,2398,2399,2436,2437,2445,2511,2512,2513,2537,2538,2539,2540,2581,2582,2583,2596,2655,2656,2658,2659,2748,2749,2751,2752,2753,2786,2788,2789,2810,2811,2859,2860,2862,2896,2904,2905,2942,2943,2944,2959,3003,3004,3006,3037,3038,3039,3083,3084,3086,3087,3109,3110,3112,3113,3160,3161,3163,3226,3239,3240,3288,3294,3295,3296,3298,3336,3338,3389,3404,3405,3418,3423,3457,3458,3459,3534,3535,3537,3538,3651,3654,3716,3717,3822,3823,3884,3885,3978,3990,3991,3995,3998,3999,4091,4092,4158,4159,4176,4177,4205,4206,4219,4236,4237,4240,4248,4260,4299,4301,4302,4315,4316,4326,4351,4354,4355,4357,4360,4361,4372,4373,4412,4413,4425,4457,4458,4460,4461,4462,4463,4465,4466,4468,4470,4471,4472,4473,4475,4477,4478,4479,4480,4481,4503,4561,4562,4563,4564,4682,4683,4685,4686,4692,4693,4742,4743,4744,4745,4818,4819,4915,4916,4920,4922,5002,5003,5142,5219,5220,5238,5284,5286,5380,5398,5399,5400,5401,5402,5403,5420,5421,5485,5486,5488,5489,5492,5527,5528,5548,5587,5588,5590,5591,5633,5634,5636,5643,5655,5656,5714,5716,5730,5734,5735,5739,5740,5780,5832,5833,5860,5869,5870,5888,5889,5968,5969,5971,5972,6002,6006,6007,6017,6047,6048,6057,6058,6068,6069,6077,6078,6093,6094,6111,6112,6127,6128,6136,6152,6153,6193,6233,6234,6235,6263,6266,6287,6288,6293,6327,6328,6330,6331,6385,6386,6451,6452,6463,6467,6522,6523,6525,6526,6543,6544,6561,6562,6577,6615,6616,6618,6619,6675,6676,6685,6686,6695,6696,6697,6698,6758,6760,6822,6824,6837,6838,6863,6864,6885,6899,6929,6933,6961,6962,6963,6977,6978,7008,7009,7021,7022,7084,7085,7112,7113,7123,7124,7136,7141,7142,7184,7185,7193,7194,7197,7212,7213,7250,7251,7259,7297,7298,7308,7320,7336,7337,7352,7367,7368,7369,7378,7379,7406,7408,7409,7410,7429,7430,7448,7449,7486,7487,7496,7514,7515,7521,7522,7539,7540,7556,7584,7598,7615,7643,7644,7645,7681,7682,7696,7697,7700,7701,7727,7728,7730,7731,7772,7781,7820,7821,7837,7838,7887,7889,7890,7891,7893,7894,7896,7940,7969,7970,7979,7980,7982,7983,7985,7989,8015,8016,8018,8019,8053,8056,8057,8090,8091,8098,8099,8124,8132,8133,8223,8224,8235,8236,8256,8257,8259,8260,8266,8267,8269,8270,8284,8286,8304,8306,8307,8308,8312,8313,8315,8330,8331,8364,8365,8373,8374,8381,8382,8395,8417,8418,8491,8492,8504,8505,8559,8561,8600,8601,8603,8604,8623,8686,8705,8706,8708,8709,8742,8743,8754,8755,8757,8758,8804,8812,8813,8850,8851,8852,8861,8863,8864,8893,8894,8909,8910,8912,8913,8948,8949,8950,8966,8967,8999,9005,9006,9017,9018,9048,9049,9050,9071,9072,9097,9098,9133,9134,9135,9150,9187,9188,9202,9203,9205,9206,9229,9255,9256,9258,9259,9271,9293,9294,9323,9324,9325,9332,9379,9380,9381,9382,9386,9419,9437,9438,9456,9476,9477,9479,9495,9496,9513,9514,9537,9538,9539,9540,9565,9566,9597,9598,9599,9600,9601,9602,9610,9611,9629,9643,9644,9670,9672,9684,9685,9686,9688,9707,9724,9725,9760,9761,9770,9771,9782,9783,9846,9847,9871,9872,9917,9918,9933,9934,9935,9936,9958,9959,9960,9961,9987,9988,9989,9990,9997,10008,10009,10010,10071,10078,10079,10082,10083,10084,10156,10157,10162,10163,10167,10168,10179,10180,10207,10208,10265,10266,10304,10318,10319,10342,10382,10383,10384,10416,10417,10420,10421,10428,10429,10463,10464,10508,10509,10546,10547,10551,10573,10574,10600,10601,10645,10662,10663,10664,10674,10675,10691,10692,10707,10708,10737,10738,10739,10744,10761,10762,10786,10787,10788,10789,10795,10838,10839,10842,10844,10879,10880,10895,10896,10897,10923,10924,10961,10962,10963,10977,10978,10992,10993,11026,11027,11036,11094,11099,11100,11101,11102,11103,11104,11113,11114,11115,11141,11142,11150,11160,11161,11191,11192,11196,11197,11198,11213,11214,11244,11245,11246,11253,11254,11273,11274,11279,11280,11287,11288,11324,11325,11355,11356,11370,11372,11380,11424,11425,11426,11478,11479,11495,11496,11515,11528,11548,11549,11562,11563,11573,11574,11608,11609,11611,11612,11645,11646,11655,11673,11687,11688,11704,11705,11706,11707,11717,11740,11741,11772,11773,11775,11776,11777,11778,11815,11820,11821,11823,11865,11866,11903,11907,11908,11915,11916,11923,11924,11945,11969,11970,12040,12045,12046,12048,12049,12054,12055,12067,12079,12080,12102,12103,12109,12110,12128,12129,12203,12204,12208,12209,12213,12214,12223,12224,12246,12247,12274,12276,12277,12316,12325,12326,12327,12330,12331,12382,12383,12419,12420,12421,12425,12491,12492,12493,12494,12495,12571,12572,12573,12595,12596,12597,12598,12635,12636,12637,12652,12653,12654,12706,12707,12717,12747,12748,12749,12753,12754,12765,12805,12819,12820,12825,12826,12843,12844,12854,12877,12878,12916,12917,12918,12919,12974,12975,12976,12977,13020,13030,13031,13076,13077,13080,13081,13116,13117,13167,13168,13169,13170,13183,13184,13186,13187,13206,13218,13247,13248,13273,13274,13316,13317,13333,13334,13368,13370,13408,13409,13410,13442,13448,13469,13470,13474,13532,13533,13573,13574,13575,13576,13640,13641,13665,13668,13669,13670,13672,13673,13674,13675,13676,13677,13749,13750,13769,13770,13778,13779,13841,13842,13868,13875,13885,13886,13935,13936,13966,13967,13972,13973,14037,14038,14072,14081,14082,14159"
for ($batchStart = $minEventId; $batchStart -le $maxEventId; $batchStart += $batchSize) {
    $batchEnd = [math]::Min($batchStart + $batchSize - 1, $maxEventId)

    $todayDate = Get-Date -Format "yyyy-MM-dd"
    $todayTime = Get-Date -Format "HHmmss"    
    $fileName = "msg-${pesRegion}_${custId}_messageSoftBounce_${todayDate}_${cdmsInstance}-${todayTime}-batch${batchNum}"
    $outputFile = Join-Path $backfillDir "${fileName}-raw.tsv"
    $sproc = "EXEC $custDbName.dbo.p_pes_backfill_soft_bounce_get @min_event_id=$batchStart, @max_event_id=$batchEnd, @region='$pesRegion', @camp_ids='$campIds'"
    Write-Output $sproc
    bcp $sproc QUERYOUT "$outputFile" -S $cdmsInstance -T -k -w

    if (-not (Test-Path $outputFile)) {
        Write-Output "Skipping upload: Raw file does not exist."
        continue
    }

    $fileContent = Get-Content $outputFile
    if ($fileContent.Count -le 1) {
        # Early exit if file is empty or contains only headers
        Write-Output "Skipping upload: File is empty or contains only headers."
        Remove-Item $outputFile -Force
        continue
    }

    ### Convert UTF8 No BOM
    $outputUtf8File = Join-Path $backfillDir "${fileName}.tsv"
    $Utf8NoBomEncoding = New-Object System.Text.UTF8Encoding $False
    [System.IO.File]::WriteAllLines($outputUtf8File, $fileContent, $Utf8NoBomEncoding)
    Remove-Item $outputFile -Force

    # Upload directly to S3
    $uploadResult = aws s3 cp $outputUtf8File "s3://es-loader-ue1-prod01/esl-service/incoming/${fileName}.tsv" --profile "na_backfill"
    if ($uploadResult -match "upload:") {
        Remove-Item -Path $outputUtf8File -Force
    } else {
        Write-Output "Failed to upload file: ${fileName}.tsv"
    }

    $batchNum++
}