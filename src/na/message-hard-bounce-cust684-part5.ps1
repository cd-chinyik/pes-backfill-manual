######################################
##      USER DEFINED PARAMETERS     ##
######################################

$cdmsInstance = "NY5PCDMSDB17"
$startDate = [DateTime]"2024-02-01"
$endDate = [DateTime]"2024-11-21 17:20:17"
$pesRegion = "na"
$backfillDir = "V:\DMS_Data04\pes_backfill\na"
$batchSize = 10000

try {
    Invoke-Sqlcmd -ServerInstance $cdmsInstance -Database "xyz_cms_common" -Query "SELECT 1"
} catch {
    Write-Output "Failed to connect to server=${cdmsInstance}"
    continue
}

######################################
##      START BACKFILL PROCESS      ##
######################################

$custId = "684"
$custDbName = "xyz_dms_cust_$custId"
$eventQuery = @"
    SELECT 
        MIN(b.bounce_id) AS min_event_id,
        MAX(b.bounce_id) AS max_event_id
    FROM dbo.t_msg_bounce b WITH (NOLOCK)
    INNER JOIN dbo.t_bounce_category bc WITH (NOLOCK)
        ON b.category_id = bc.category_id
    WHERE b.bounce_time BETWEEN '$startDate' AND '$endDate'
        AND bc.hard_flag = 1;
"@

$minMaxResult = Invoke-Sqlcmd -ServerInstance $cdmsInstance -Database $custDbName -Query $eventQuery
$minEventId = $minMaxResult.min_event_id
$maxEventId = $minMaxResult.max_event_id

if ([string]::IsNullOrWhiteSpace($minEventId) -or [string]::IsNullOrWhiteSpace($maxEventId)) {
    Write-Output "There is no data to backfill for cust_id=${custId}, server=${cdmsInstance}"
    continue
}

$batchNum = 1
$campIds = "52186,52187,52188,52249,52250,52281,52282,52301,52302,52303,52304,52305,52306,52389,52390,52417,52419,52493,52494,52505,52517,52520,52606,52673,52675,52676,52724,52725,52728,52729,52734,52755,52756,52766,52767,52768,52939,52940,53025,53026,53030,53031,53034,53035,53096,53097,53098,53111,53112,53113,53122,53123,53126,53128,53137,53138,53177,53178,53219,53247,53248,53278,53279,53283,53284,53296,53312,53313,53318,53319,53341,53353,53358,53386,53392,53394,53395,53422,53423,53425,53476,53479,53480,53551,53568,53569,53570,53571,53660,53661,53664,53665,53687,53688,53689,53690,53691,53710,53754,53755,53763,53765,53766,53767,53776,53777,53779,53780,53781,53820,53821,53823,53871,53872,53874,53877,53887,53888,53889,53890,53891,53903,53904,53927,53928,53938,53939,53940,53944,53945,53946,53958,53983,53984,54041,54063,54064,54067,54068,54082,54094,54124,54125,54140,54141,54142,54144,54145,54146,54148,54149,54150,54152,54153,54154,54161,54173,54174,54178,54179,54207,54208,54209,54231,54232,54233,54234,54250,54283,54284,54285,54286,54287,54288,54446,54447,54450,54451,54456,54470,54471,54472,54487,54488,54527,54528,54529,54545,54546,54547,54550,54552,54580,54581,54582,54583,54584,54619,54620,54623,54638,54641,54650,54657,54663,54678,54679,54680,54763,54764,54803,54819,54820,54839,54840,54841,54929,55002,55003,55022,55023,55054,55055,55056,55057,55089,55112,55178,55186,55191,55192,55252,55282,55283,55303,55304,55321,55322,55327,55328,55329,55351,55353,55355,55386,55387,55388,55390,55392,55393,55394,55434,55439,55472,55474,55476,55490,55491,55492,55505,55506,55519,55549,55550,55555,55564,55588,55598,55607,55608,55631,55651,55866,55867,55868,55870,55871,55872,55873,55874,55878,55884,55891,55893,55894,55895,55897,55898,55899,55900,55928,55929,55950,55974,56019,56020,56021,56022,56023,56024,56025,56026,56055,56056,56062,56063,56064,56092,56094,56097,56098,56099,56101,56102,56103,56104,56105,56106,56125,56131,56167,56174,56175,56181,56233,56259,56263,56264,56265,56269,56272,56273,56275,56276,56278,56279,56350,56351,56354,56381,56384,56385,56389,56391,56397,56414,56415,56468,56469,56498,56499,56500,56501,56502,56503,56504,56505,56582,56583,56652,56653,56687,56780,56785,56816,56817,56868,56919,56931,56933,56935,56937,56945,56946,56947,56948,56957,56958,56959,56961,56963,56964,56986,57003,57004,57005,57007,57008,57009,57011,57012,57013,57014,57015,57016,57019,57059,57077,57078,57079,57081,57082,57083,57084,57098,57099,57118,57182,57184,57212,57231,57232,57251,57276,57284,57285,57310,57327,57329,57330,57331,57332,57333,57335,57336,57337,57338,57384,57387,57390,57399,57400,57401,57402,57411,57413,57456,57457,57504,57505,57506,57517,57518,57519,57520,57521,57522,57525,57526,57527,57533,57550,57551,57557,57558,57560,57561,57569,57577,57595,57597,57601,57602,57606,57611,57623,57624,57625,57656,57680,57686,57729,57732,57733,57737,57797,57802,57803,57804,57806,57807,57808,57809,57812,57842,57850,57851,57864,57870,57913,57919,57923,57926,57927,57929,57931,57932,57939,57940,57990,57991,57993,57994,57995,57997,57998,57999,58000,58034,58052,58053,58054,58055,58056,58057,58058,58059,58082,58083,58085,58086,58087,58089,58090,58091,58119,58120,58122,58123,58124,58126,58127,58128,58129,58141,58146,58197,58198,58203,58204,58205,58207,58208,58209,58224,58297,58299,58300,58301,58327,58328,58370,58371,58372,58374,58376,58377,58385,58394,58424,58425,58451,58452,58453,58541,58542,58546,58580,58581,58628,58726,58727,58751,58752,58753,58756,58757,58758,58760,58761,58762,58763,58764,58765,58770,58785,58786,58824,58827,58828,58847,58865,58866,58915,58916,58994,58995,59001,59003,59005,59007,59008,59048,59049,59050,59051,59052,59053,59055,59056,59057,59058,59059,59060,59084,59085,59110,59152,59153,59154,59156,59157,59158,59159,59160,59174,59175,59176,59178,59207,59314,59495,59497,59498,59499,59500,59501,59504,59505,59506,59507,59508,59509,59510,59511,59587,59588,59705,59707,59710,59711,59712,59722,59809,59812,59813,59814,59816,59817,59818,59819,59820,59821,59822,59823,59824,59825,59826,59846,59847,59848,59855,59890,59891,59892,59893,59897,59940,59942,59968,59969,59970,59971,59972,60015,60016,60017,60018,60019,60020,60021,60022,60023,60063,60064,60065,60104,60105,60121,60145,60146,60147,60148,60205,60209,60217,60236,60256,60257,60307,60348,60379,60380,60427,60455,60463,60466,60467,60468,60470,60471,60472,60473,60474,60475,60476,60477,60478,60529,60530,60549,60550,60596,60597,60657,60679,60688,60689,60732,60733,60734,60768,60771,60842,60843,60868,60869,60870,60871,60872,60888,60899,60908,60909,60917,60929,60947,60948,60979,60980,61018,61019,61020,61022,61023,61024,61026,61027,61028,61029,61069,61070,61091,61092,61146,61147,61148,61178,61179,61180,61182,61184,61185,61229,61236,61263,61264,61265,61297,61343,61417,61418,61419,61420,61421,61427,61428,61444,61445,61518,61528,61543,61544,62574,62590,62595,62607,62609,62613,62616,62620,62633,62640,62644,62645,62646,62663,62665,62738,62739,62741,62754"
for ($batchStart = $minEventId; $batchStart -le $maxEventId; $batchStart += $batchSize) {
    $batchEnd = [math]::Min($batchStart + $batchSize - 1, $maxEventId)

    $todayDate = Get-Date -Format "yyyy-MM-dd"
    $todayTime = Get-Date -Format "HHmmss"    
    $fileName = "msg-${pesRegion}_${custId}_messageHardBounce_${todayDate}_${cdmsInstance}-${todayTime}-batch${batchNum}"
    $outputFile = Join-Path $backfillDir "${fileName}-raw.tsv"
    $sproc = "EXEC $custDbName.dbo.p_pes_backfill_hard_bounce_get @min_event_id=$batchStart, @max_event_id=$batchEnd, @region='$pesRegion', @camp_ids='$campIds'"
    bcp $sproc QUERYOUT "$outputFile" -S $cdmsInstance -T -k -w

    if (-not (Test-Path $outputFile)) {
        Write-Output "Skipping upload: Raw file does not exist."
        continue
    }

    $fileContent = Get-Content $outputFile
    if ($fileContent.Count -le 1) {
        # Early exit if file is empty or contains only headers
        Write-Output "Skipping upload: File is empty or contains only headers."
        Remove-Item $outputFile -Force
        continue
    }

    ### Convert UTF8 No BOM
    $outputUtf8File = Join-Path $backfillDir "${fileName}.tsv"
    $Utf8NoBomEncoding = New-Object System.Text.UTF8Encoding $False
    [System.IO.File]::WriteAllLines($outputUtf8File, $fileContent, $Utf8NoBomEncoding)
    Remove-Item $outputFile -Force

    # Upload directly to S3
    $uploadResult = aws s3 cp $outputUtf8File "s3://es-loader-ue1-prod01/esl-service/incoming/${fileName}.tsv" --profile "na_backfill"
    if ($uploadResult -match "upload:") {
        Remove-Item -Path $outputUtf8File -Force
    } else {
        Write-Output "Failed to upload file: ${fileName}.tsv"
    }

    $batchNum++
}