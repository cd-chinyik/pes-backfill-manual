######################################
##      USER DEFINED PARAMETERS     ##
######################################

$cdmsInstance = "NY5PCDMSDB17"
$startDate = [DateTime]"2024-02-01"
$endDate = [DateTime]"2024-11-21 17:20:17"
$pesRegion = "na"
$backfillDir = "V:\DMS_Data04\pes_backfill\na"
$batchSize = 10000

try {
    Invoke-Sqlcmd -ServerInstance $cdmsInstance -Database "xyz_cms_common" -Query "SELECT 1"
} catch {
    Write-Output "Failed to connect to server=${cdmsInstance}"
    continue
}

######################################
##      START BACKFILL PROCESS      ##
######################################

$custId = "684"
$custDbName = "xyz_dms_cust_$custId"
$eventQuery = @"
    SELECT 
        MIN(b.bounce_id) AS min_event_id,
        MAX(b.bounce_id) AS max_event_id
    FROM dbo.t_msg_bounce b WITH (NOLOCK)
    INNER JOIN dbo.t_bounce_category bc WITH (NOLOCK)
        ON b.category_id = bc.category_id
    WHERE b.bounce_time BETWEEN '$startDate' AND '$endDate'
        AND bc.hard_flag IN (0, 2);
"@

$minMaxResult = Invoke-Sqlcmd -ServerInstance $cdmsInstance -Database $custDbName -Query $eventQuery
$minEventId = $minMaxResult.min_event_id
$maxEventId = $minMaxResult.max_event_id

if ([string]::IsNullOrWhiteSpace($minEventId) -or [string]::IsNullOrWhiteSpace($maxEventId)) {
    Write-Output "There is no data to backfill for cust_id=${custId}, server=${cdmsInstance}"
    continue
}

$batchNum = 1
$campIds = "14160,14305,14306,14307,14308,14309,14310,14313,14314,14315,14316,14318,14321,14326,14340,14341,14373,14374,14375,14399,14419,14420,14432,14446,14447,14562,14563,14564,14565,14566,14567,14568,14569,14571,14603,14604,14606,14610,14612,14693,14694,14695,14697,14702,14705,14706,14707,14708,14709,14711,14712,14713,14715,14831,14833,14835,14836,14840,14858,14859,14860,14861,14862,14879,14880,14881,14882,14886,14888,14917,14918,14940,14974,14975,15009,15010,15024,15026,15027,15028,15030,15044,15091,15109,15110,15172,15173,15213,15214,15241,15242,15299,15300,15369,15371,15372,15373,15375,15406,15407,15418,15458,15459,15488,15489,15531,15533,15534,15535,15537,15576,15577,15578,15579,15580,15582,15583,15584,15585,15586,15612,15613,15637,15639,15640,15641,15642,15643,15682,15684,15685,15686,15688,15692,15693,15694,15695,15696,15698,15699,15700,15701,15702,15752,15753,15754,15756,15757,15759,15779,15780,15887,15922,15932,15933,15967,15968,15975,15976,16023,16024,16076,16077,16078,16079,16085,16086,16091,16130,16156,16158,16159,16160,16161,16162,16245,16268,16269,16280,16281,16292,16294,16295,16318,16319,16324,16364,16365,16386,16387,16447,16455,16456,16549,16606,16607,16634,16636,16637,16638,16640,16655,16675,16677,16678,16679,16681,16736,16737,16797,16802,16803,16804,16806,16835,16836,16869,16870,16892,16893,16994,17047,17048,17053,17060,17061,17077,17086,17088,17123,17124,17161,17162,17175,17176,17251,17253,17254,17255,17257,17266,17281,17282,17283,17285,17324,17327,17357,17358,17362,17363,17401,17402,17403,17438,17439,17459,17460,17488,17489,17523,17538,17539,17544,17545,17551,17552,17627,17628,17682,17683,17694,17750,17751,17772,17794,17795,17798,17826,17827,17837,17870,17871,17872,17873,17874,17875,17905,17948,17951,17952,18000,18001,18002,18030,18031,18039,18060,18061,18077,18098,18099,18123,18124,18132,18171,18172,18176,18178,18179,18215,18216,18217,18231,18270,18276,18302,18303,18343,18383,18384,18390,18391,18503,18504,18505,18554,18555,18556,18557,18558,18565,18616,18617,18621,18622,18624,18625,18626,18660,18719,18720,18773,18774,18787,18788,18789,18824,18825,18848,18849,18877,18915,18916,18917,18927,18928,18966,18967,18968,18969,18999,19000,19040,19041,19107,19108,19110,19111,19127,19128,19175,19191,19192,19217,19239,19240,19286,19287,19325,19327,19328,19344,19352,19353,19378,19412,19413,19429,19430,19432,19456,19476,19477,19479,19510,19511,19518,19519,19544,19545,19546,19556,19568,19569,19607,19608,19641,19643,19652,19653,19678,19679,19702,19752,19753,19754,19755,19756,19757,19758,19759,19760,19777,19778,19823,19860,19861,19862,19919,19920,19935,19936,19945,19946,19957,19958,19974,20003,20004,20028,20029,20056,20057,20139,20140,20141,20142,20172,20173,20174,20255,20256,20283,20291,20292,20308,20323,20324,20350,20351,20413,20414,20457,20469,20470,20473,20474,20489,20490,20503,20508,20522,20525,20526,20550,20551,20556,20557,20578,20579,20612,20613,20638,20639,20655,20656,20672,20673,20674,20675,20697,20698,20705,20722,20723,20729,20730,20743,20744,20768,20769,20770,20771,20795,20796,20805,20831,20844,20845,20852,20886,20896,20897,20918,20919,20946,20953,20954,20994,20995,21004,21026,21027,21049,21050,21071,21072,21112,21125,21137,21138,21146,21147,21148,21149,21191,21192,21214,21215,21240,21241,21263,21277,21278,21293,21296,21298,21315,21343,21368,21369,21379,21387,21413,21434,21435,21436,21458,21459,21489,21490,21505,21510,21547,21548,21554,21555,21606,21607,21612,21613,21665,21666,21683,21684,21700,21711,21712,21736,21737,21770,21771,21799,21826,21827,21836,21853,21856,21857,21895,21896,21897,21910,21932,21935,21942,21943,21957,21958,21978,22001,22002,22035,22047,22048,22049,22070,22071,22108,22109,22126,22187,22188,22193,22194,22239,22240,22244,22282,22283,22292,22293,22373,22374,22401,22402,22403,22429,22450,22451,22454,22455,22456,22457,22458,22510,22511,22523,22524,22550,22551,22564,22641,22656,22683,22689,22690,22717,22718,22720,22740,22750,22751,22779,22780,22783,22802,22803,22838,22839,22859,22868,22869,22893,22894,22895,22926,22937,22940,23005,23006,23013,23014,23037,23038,23073,23074,23075,23106,23107,23110,23111,23142,23143,23165,23188,23195,23196,23238,23239,23258,23297,23302,23303,23323,23324,23375,23402,23403,23404,23438,23446,23448,23449,23450,23500,23501,23504,23516,23517,23520,23528,23529,23531,23532,23574,23576,23577,23591,23592,23647,23649,23651,23654,23655,23695,23696,23698,23700,23701,23722,23723,23724,23725,23767,23768,23769,23822,23823,23824,23825,23829,23830,23831,23852,23864,23865,23867,23868,23905,23906,23907,23908,23926,23927,23929,23930,23958,23959,23960,23961,23977,24024,24025,24027,24030,24031,24032,24033,24081,24082,24093,24094,24095,24096,24097,24107,24108,24109,24150,24151,24152,24153,24174,24175,24210,24211,24213,24214,24222,24223,24268,24269,24270,24271,24313,24315,24316,24317,24332,24333,24335,24336,24363,24364,24365,24366,24383,24384,24385,24386,24434,24435,24436,24437,24470,24471,24473,24478,24479,24480,24521,24522,24524,24561,24562,24564,24565,24569,24580,24648,24649,24650,24666,24705,24706,24707,24708,24711,24712,24714,24770,24771,24772,24773,24792,24793,24794,24795,24797,24798,24827,24828,24829,24830,24847,24848,24849,24850,24883,24884,24885,24886,24903,24904,24905,24954,24955,24957,24958,24968,24995,24996,24997,24998,25037,25038,25039,25040,25098,25099,25101,25102,25146,25148,25149,25163,25203,25204,25205,25228,25229,25274,25275,25278,25288,25289,25310,25311,25327,25350,25362,25373,25374,25392,25393,25394,25433,25442,25443,25447,25448,25488,25489,25490,25507,25508,25513,25514,25520,25557,25558,25570,25592,25593,25596,25614,25615,25616,25630,25631,25643,25659,25684,25685,25731,25734,25785,25786,25789,25790,25806,25807,25851,25896,25897,25999,26032,26078,26085,26132,26133,26159,26186,26262,26264,26265,26310,26315,26316,26317,26318,26336,26337,26352,26361,26362,26388,26389,26402,26410,26453,26478,26479,26499,26505,26506,26525,26536,26546,26547,26569,26584,26585,26600,26614,26615,26621,26632,26650,26659,26664,26741,26742,26756,26763,26764,26776,26788"
for ($batchStart = $minEventId; $batchStart -le $maxEventId; $batchStart += $batchSize) {
    $batchEnd = [math]::Min($batchStart + $batchSize - 1, $maxEventId)

    $todayDate = Get-Date -Format "yyyy-MM-dd"
    $todayTime = Get-Date -Format "HHmmss"    
    $fileName = "msg-${pesRegion}_${custId}_messageSoftBounce_${todayDate}_${cdmsInstance}-${todayTime}-batch${batchNum}"
    $outputFile = Join-Path $backfillDir "${fileName}-raw.tsv"
    $sproc = "EXEC $custDbName.dbo.p_pes_backfill_soft_bounce_get @min_event_id=$batchStart, @max_event_id=$batchEnd, @region='$pesRegion', @camp_ids='$campIds'"
    Write-Output $sproc
    bcp $sproc QUERYOUT "$outputFile" -S $cdmsInstance -T -k -w

    if (-not (Test-Path $outputFile)) {
        Write-Output "Skipping upload: Raw file does not exist."
        continue
    }

    $fileContent = Get-Content $outputFile
    if ($fileContent.Count -le 1) {
        # Early exit if file is empty or contains only headers
        Write-Output "Skipping upload: File is empty or contains only headers."
        Remove-Item $outputFile -Force
        continue
    }

    ### Convert UTF8 No BOM
    $outputUtf8File = Join-Path $backfillDir "${fileName}.tsv"
    $Utf8NoBomEncoding = New-Object System.Text.UTF8Encoding $False
    [System.IO.File]::WriteAllLines($outputUtf8File, $fileContent, $Utf8NoBomEncoding)
    Remove-Item $outputFile -Force

    # Upload directly to S3
    $uploadResult = aws s3 cp $outputUtf8File "s3://es-loader-ue1-prod01/esl-service/incoming/${fileName}.tsv" --profile "na_backfill"
    if ($uploadResult -match "upload:") {
        Remove-Item -Path $outputUtf8File -Force
    } else {
        Write-Output "Failed to upload file: ${fileName}.tsv"
    }

    $batchNum++
}