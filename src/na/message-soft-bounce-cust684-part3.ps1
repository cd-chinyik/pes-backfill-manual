######################################
##      USER DEFINED PARAMETERS     ##
######################################

$cdmsInstance = "NY5PCDMSDB17"
$startDate = [DateTime]"2024-02-01"
$endDate = [DateTime]"2024-11-21 17:20:17"
$pesRegion = "na"
$backfillDir = "V:\DMS_Data04\pes_backfill\na"
$batchSize = 10000

try {
    Invoke-Sqlcmd -ServerInstance $cdmsInstance -Database "xyz_cms_common" -Query "SELECT 1"
} catch {
    Write-Output "Failed to connect to server=${cdmsInstance}"
    continue
}

######################################
##      START BACKFILL PROCESS      ##
######################################

$custId = "684"
$custDbName = "xyz_dms_cust_$custId"
$eventQuery = @"
    SELECT 
        MIN(b.bounce_id) AS min_event_id,
        MAX(b.bounce_id) AS max_event_id
    FROM dbo.t_msg_bounce b WITH (NOLOCK)
    INNER JOIN dbo.t_bounce_category bc WITH (NOLOCK)
        ON b.category_id = bc.category_id
    WHERE b.bounce_time BETWEEN '$startDate' AND '$endDate'
        AND bc.hard_flag IN (0, 2);
"@

$minMaxResult = Invoke-Sqlcmd -ServerInstance $cdmsInstance -Database $custDbName -Query $eventQuery
$minEventId = $minMaxResult.min_event_id
$maxEventId = $minMaxResult.max_event_id

if ([string]::IsNullOrWhiteSpace($minEventId) -or [string]::IsNullOrWhiteSpace($maxEventId)) {
    Write-Output "There is no data to backfill for cust_id=${custId}, server=${cdmsInstance}"
    continue
}

$batchNum = 1
$campIds = "26807,26808,26814,26875,26876,26879,26955,26956,26957,26958,26993,27053,27054,27055,27059,27060,27063,27100,27131,27132,27185,27186,27213,27221,27222,27225,27226,27327,27328,27338,27362,27363,27389,27390,27431,27451,27476,27484,27485,27505,27506,27517,27523,27526,27535,27563,27564,27586,27587,27621,27643,27645,27701,27734,27753,27754,27775,27776,27786,27811,27812,27854,27855,27857,27900,27901,27912,27931,27932,27941,27979,27980,27991,27992,28003,28004,28005,28008,28009,28024,28092,28111,28112,28140,28145,28170,28171,28180,28181,28237,28240,28243,28244,28263,28264,28277,28278,28295,28296,28311,28315,28343,28349,28352,28353,28368,28369,28375,28384,28395,28396,28412,28427,28459,28505,28507,28508,28548,28569,28570,28572,28600,28601,28616,28617,28667,28668,28694,28695,28710,28726,28727,28782,28786,28789,28790,28791,28827,28862,28864,28895,28896,28898,28913,28927,28931,28952,28958,28959,28960,28981,28982,28999,29033,29054,29055,29071,29084,29085,29099,29100,29101,29134,29141,29142,29164,29165,29185,29188,29189,29210,29218,29223,29247,29248,29278,29279,29305,29306,29338,29356,29357,29360,29361,29386,29393,29396,29398,29416,29417,29424,29425,29451,29452,29462,29463,29467,29514,29515,29538,29539,29562,29563,29570,29575,29597,29598,29616,29623,29642,29643,29672,29673,29675,29685,29711,29714,29750,29759,29760,29761,29766,29767,29789,29815,29816,29817,29828,29839,29850,29851,29896,29909,29929,29930,29932,29933,29935,29945,29964,29981,30004,30008,30011,30038,30039,30074,30075,30090,30091,30093,30101,30118,30124,30137,30147,30148,30203,30204,30205,30206,30217,30221,30222,30227,30240,30264,30273,30282,30283,30343,30344,30348,30349,30376,30377,30400,30404,30406,30436,30442,30448,30450,30451,30488,30489,30506,30512,30519,30528,30544,30561,30573,30600,30601,30602,30603,30647,30658,30659,30660,30661,30677,30678,30679,30680,30701,30710,30719,30720,30721,30732,30733,30735,30758,30769,30770,30784,30790,30809,30830,30878,30880,30881,30911,30912,30913,30914,30932,30933,30941,30950,30977,30981,30993,30994,31012,31013,31016,31101,31102,31103,31104,31113,31114,31116,31117,31118,31119,31120,31121,31192,31193,31210,31211,31222,31223,31234,31235,31253,31266,31267,31279,31293,31294,31301,31316,31325,31340,31364,31365,31384,31385,31394,31395,31398,31399,31521,31523,31525,31526,31530,31536,31565,31577,31578,31579,31599,31600,31621,31629,31642,31643,31650,31651,31663,31664,31675,31678,31679,31702,31716,31717,31777,31778,31800,31854,31855,31857,31858,31906,31919,31920,31932,31940,31941,31942,31963,31969,31986,31987,32070,32071,32077,32079,32094,32095,32103,32119,32120,32125,32136,32140,32143,32157,32158,32160,32167,32240,32241,32255,32261,32264,32275,32276,32281,32304,32374,32375,32378,32388,32401,32402,32424,32425,32455,32456,32457,32465,32494,32501,32513,32514,32522,32539,32540,32556,32569,32587,32700,32701,32772,32773,32774,32781,32788,32789,32810,32814,32815,32819,32839,32840,32858,32859,32877,32879,32883,32895,32896,32925,32927,32930,32938,32960,32961,32963,32975,32976,32989,33008,33009,33011,33035,33036,33037,33055,33090,33092,33093,33108,33109,33128,33131,33142,33143,33145,33152,33159,33175,33176,33191,33194,33195,33321,33322,33323,33342,33349,33365,33366,33389,33400,33423,33424,33435,33447,33464,33477,33478,33487,33493,33507,33521,33559,33560,33564,33570,33571,33586,33592,33597,33605,33606,33623,33643,33660,33666,33667,33668,33700,33705,33723,33738,33750,33751,33752,33765,33791,33806,33823,33836,33837,33846,33847,33865,33910,33924,33925,33945,33946,33965,33983,33984,34002,34007,34015,34038,34039,34040,34052,34079,34086,34087,34099,34147,34165,34171,34172,34212,34213,34229,34231,34241,34242,34243,34246,34262,34269,34270,34283,34309,34310,34332,34334,34377,34381,34385,34386,34435,34449,34455,34469,34470,34487,34488,34504,34535,34544,34554,34561,34585,34587,34588,34595,34596,34604,34605,34625,34626,34636,34667,34784,34785,34786,34789,34790,34806,34807,34824,34825,34837,34850,34854,34862,34863,34865,34866,34869,34870,34889,34890,34903,34905,34906,34907,34934,34935,34956,34957,34958,34981,34982,34993,35012,35021,35022,35042,35043,35056,35097,35098,35117,35120,35132,35155,35156,35176,35177,35178,35188,35189,35191,35207,35237,35238,35251,35271,35276,35281,35284,35307,35308,35319,35320,36335,36349,36384,36385,36392,36395,36433,36434,36435,36444,36459,36463,36513,36550,36551,36562,36566,36592,36594,36597,36614,36617,36618,36619,36630,36653,36671,36672,36690,36691,36701,36702,36706,36709,36745,36746,36749,36757,36765,36766,36785,36786,36792,36800,36811,36819,36823,36824,36867,36868,36890,36903,36907,36916,36917,36927,36944,36948,37009,37033,37069,37073,37074,37090,37099,37108,37144,37145,37155,37161,37173,37174,37191,37195,37203,37216,37217,37218,37224,37243,37254,37276,37277,37280,37287,37290,37292,37311,37319,37322,37323,37362,37363,37364,37373,37392,37414,37420,37421,37454,37455,37463,37464,37483,37524,37529,37545,37546,37571,37578,37588,37589,37611,37617,37639,37652,37653,37654,37669,37703,37711,37712,37716,37719,37753,37772,37779,37780,37786,37787,37788,37789,37808,37814,37815,37834,37853,37854,37867,37874,37875,37891,37934,37944,37946,37997,37998,38031,38039,38043,38044,38063,38064,38065,38084,38094,38125,38126,38131,38139,38146,38152,38153,38184,38185,38247,38248,38249,38252,38271,38272,38274,38300,38321,38322,38327,38335,38358,38359,38376,38386,38392,38393,38394,38395,38410,38417,38418,38449,38463,38464,38517,38518,38521,38569,38570,38579,38583,38586,38610,38611,38631,38639,38640,38648,38662,38663,38664,38698,38699,38703,38733,38752,38760,38761,38762,38776,38785,38792,38793,38799,38801,38849,38850,38851,38858,38859,38864,38886,38887,38892,38895,38907,38908,38921,38956,38963,38972,38973,38979,38989,38990,38998,39009,39038,39039,39042,39053,39111,39123,39127,39142,39143,39159,39160,39165,39170,39192,39193,39194,39232,39233,39234,39235,39259,39260,39266,39282,39283,39292,39305,39306,39321,39359,39360,39409,39410,39411,39433,39434,39436,39437,39448,39449,39492,39493,39512,39544,39545,39563,39565,39576,39577,39582,39610"
for ($batchStart = $minEventId; $batchStart -le $maxEventId; $batchStart += $batchSize) {
    $batchEnd = [math]::Min($batchStart + $batchSize - 1, $maxEventId)

    $todayDate = Get-Date -Format "yyyy-MM-dd"
    $todayTime = Get-Date -Format "HHmmss"    
    $fileName = "msg-${pesRegion}_${custId}_messageSoftBounce_${todayDate}_${cdmsInstance}-${todayTime}-batch${batchNum}"
    $outputFile = Join-Path $backfillDir "${fileName}-raw.tsv"
    $sproc = "EXEC $custDbName.dbo.p_pes_backfill_soft_bounce_get @min_event_id=$batchStart, @max_event_id=$batchEnd, @region='$pesRegion', @camp_ids='$campIds'"
    Write-Output $sproc
    bcp $sproc QUERYOUT "$outputFile" -S $cdmsInstance -T -k -w

    if (-not (Test-Path $outputFile)) {
        Write-Output "Skipping upload: Raw file does not exist."
        continue
    }

    $fileContent = Get-Content $outputFile
    if ($fileContent.Count -le 1) {
        # Early exit if file is empty or contains only headers
        Write-Output "Skipping upload: File is empty or contains only headers."
        Remove-Item $outputFile -Force
        continue
    }

    ### Convert UTF8 No BOM
    $outputUtf8File = Join-Path $backfillDir "${fileName}.tsv"
    $Utf8NoBomEncoding = New-Object System.Text.UTF8Encoding $False
    [System.IO.File]::WriteAllLines($outputUtf8File, $fileContent, $Utf8NoBomEncoding)
    Remove-Item $outputFile -Force

    # Upload directly to S3
    $uploadResult = aws s3 cp $outputUtf8File "s3://es-loader-ue1-prod01/esl-service/incoming/${fileName}.tsv" --profile "na_backfill"
    if ($uploadResult -match "upload:") {
        Remove-Item -Path $outputUtf8File -Force
    } else {
        Write-Output "Failed to upload file: ${fileName}.tsv"
    }

    $batchNum++
}