######################################
##      USER DEFINED PARAMETERS     ##
######################################

$cdmsInstance = "NY5PCDMSDB17"
$startDate = [DateTime]"2024-02-01"
$endDate = [DateTime]"2024-11-21 17:20:17"
$pesRegion = "na"
$backfillDir = "V:\DMS_Data04\pes_backfill\na"
$batchSize = 10000

try {
    Invoke-Sqlcmd -ServerInstance $cdmsInstance -Database "xyz_cms_common" -Query "SELECT 1"
} catch {
    Write-Output "Failed to connect to server=${cdmsInstance}"
    continue
}

######################################
##      START BACKFILL PROCESS      ##
######################################

$custId = "684"
$custDbName = "xyz_dms_cust_$custId"
$eventQuery = @"
    SELECT 
        MIN(b.bounce_id) AS min_event_id,
        MAX(b.bounce_id) AS max_event_id
    FROM dbo.t_msg_bounce b WITH (NOLOCK)
    INNER JOIN dbo.t_bounce_category bc WITH (NOLOCK)
        ON b.category_id = bc.category_id
    WHERE b.bounce_time BETWEEN '$startDate' AND '$endDate'
        AND bc.hard_flag IN (0, 2);
"@

$minMaxResult = Invoke-Sqlcmd -ServerInstance $cdmsInstance -Database $custDbName -Query $eventQuery
$minEventId = $minMaxResult.min_event_id
$maxEventId = $minMaxResult.max_event_id

if ([string]::IsNullOrWhiteSpace($minEventId) -or [string]::IsNullOrWhiteSpace($maxEventId)) {
    Write-Output "There is no data to backfill for cust_id=${custId}, server=${cdmsInstance}"
    continue
}

$batchNum = 1
$campIds = "39633,39634,39643,39661,39662,39673,39674,39685,39702,39703,39710,39713,39736,39737,39744,39854,39856,39870,39871,39918,39934,39938,39956,39957,39960,39965,39985,39995,39996,40007,40013,40024,40025,40031,40036,40086,40102,40109,40110,40132,40133,40142,40143,40151,40161,40194,40195,40196,40212,40228,40229,40250,40261,40263,40314,40345,40346,40364,40365,40397,40404,40405,40427,40428,40437,40491,40492,40502,40503,40505,40520,40521,40525,40547,40548,40558,40562,40578,40597,40601,40603,40604,40605,40629,40630,40631,40670,40676,40680,40681,40690,40691,40701,40707,40731,40774,40775,40801,40807,40809,40822,40823,40824,40836,40853,40854,40860,40879,40880,40881,40908,40909,40910,40935,40936,40940,40956,40978,40979,40980,40981,40989,40993,40994,41021,41022,41034,41041,41057,41072,41073,41086,41087,41092,41115,41147,41150,41151,41160,41168,41171,41185,41186,41196,41200,41204,41223,41224,41230,41237,41259,41260,41267,41268,41278,41287,41288,41295,41296,41301,41302,41303,41304,41334,41348,41349,41362,41382,41383,41393,41415,41416,41422,41440,41455,41527,41528,41529,41530,41583,41586,41616,41617,41654,41709,41732,41733,41758,41759,41773,41784,41789,41790,41828,41876,41914,41915,41916,41943,41965,41971,41972,42011,42012,42016,42027,42028,42041,42042,42043,42046,42078,42079,42141,42147,42153,42155,42157,42230,42231,42239,42262,42263,42287,42288,42289,42318,42319,42339,42361,42362,42369,42383,42384,42399,42428,42429,42440,42450,42454,42484,42485,42531,42540,42541,42566,42587,42588,42622,42623,42626,42627,42659,42664,42675,42676,42698,42701,42734,42735,42756,42758,42808,42809,42841,42855,42880,42889,42890,42936,42939,42945,42958,42962,42991,42993,42994,42999,43003,43004,43006,43007,43020,43024,43055,43056,43059,43061,43076,43169,43170,43171,43181,43189,43203,43208,43209,43224,43237,43238,43252,43253,43257,43267,43281,43284,43285,43308,43319,43320,43323,43340,43343,43344,43354,43357,43385,43387,43399,43402,43413,43414,43415,43416,43442,43444,43449,43450,43451,43457,43467,43470,43472,43474,43477,43479,43481,43503,43504,43505,43514,43515,43534,43536,43537,43538,43555,43557,43562,43614,43615,43616,43658,43676,43684,43685,43699,43702,43703,43707,43708,43713,43729,43730,43790,43791,43792,43812,43819,43822,43849,43850,43852,43874,43878,43879,43901,43902,43910,43912,43919,43937,43938,43939,43940,43955,43956,43957,43968,43980,43981,43994,43995,43996,44007,44008,44009,44010,44016,44019,44047,44048,44074,44075,44076,44108,44109,44159,44160,44161,44169,44170,44183,44237,44257,44258,44273,44274,44278,44279,44292,44297,44322,44323,44325,44332,44333,44449,44496,44497,44498,44499,44500,44512,44513,44514,44515,44636,44637,44638,44640,44641,44642,44643,44644,44658,44679,44680,44681,44693,44694,44719,44721,44740,44743,44764,44765,44779,44780,44801,44802,44846,44847,44848,44867,44868,44870,44878,44879,44898,44921,44958,44959,44984,44990,44991,45013,45014,45016,45041,45042,45043,45049,45053,45096,45097,45143,45156,45164,45165,45166,45200,45201,45202,45224,45226,45240,45241,45242,45243,45257,45274,45276,45277,45288,45306,45344,45367,45368,45380,45420,45439,45440,45448,45449,45450,45468,45478,45482,45499,45500,45502,45503,45576,45588,45589,45590,45593,45594,45595,45596,45610,45611,45612,45621,45622,45647,45660,45661,45662,45663,45672,45685,45688,45689,45698,45704,45724,45725,45726,45743,45750,45751,45752,45753,45765,45766,45783,45785,45805,45808,45809,45810,45826,45876,45893,45900,45930,45932,45936,45943,45960,45961,45962,45989,45990,46044,46045,46057,46058,46059,46089,46090,46091,46104,46105,46106,46135,46146,46155,46159,46179,46194,46195,46196,46213,46217,46218,46261,46263,46265,46267,46269,46290,46291,46292,46319,46320,46321,46329,46348,46350,46384,46385,46389,46390,46394,46443,46444,46445,46486,46709,46710,46712,46713,46714,46717,46718,46719,46731,46732,46733,46741,46754,46807,46808,46809,46855,46860,46861,46862,46904,46905,46906,46973,46979,46980,46981,46986,46987,46988,46989,47000,47004,47028,47039,47040,47041,47042,47054,47055,47059,47080,47081,47082,47099,47100,47108,47116,47136,47147,47148,47156,47157,47159,47222,47223,47224,47259,47260,47263,47265,47301,47314,47323,47346,47347,47348,47349,47364,47365,47368,47403,47404,47432,47438,47439,47468,47469,47470,47471,47491,47517,47518,47534,47535,47536,47537,47569,47584,47585,47586,47597,47601,47603,47605,47608,47613,47619,47622,47625,47627,47629,47630,47632,47634,47645,47668,47669,47670,47671,47672,47673,47757,47758,47769,47777,47784,47786,47805,47807,47862,47889,47890,47896,47934,47967,47973,47974,47992,48015,48016,48099,48147,48148,48149,48235,48236,48244,48246,48247,48262,48328,48334,48335,48364,48366,48367,48379,48444,48445,48446,48466,48471,48480,48481,48531,48532,48584,48585,48589,48594,48606,48634,48635,48636,48637,48638,48660,48661,48663,48798,48799,48800,48861,48862,48863,48864,48970,48971,49007,49008,49031,49032,49034,49066,49087,49090,49097,49098,49099,49100,49101,49105,49152,49153,49170,49171,49172,49177,49202,49203,49204,49232,49233,49234,49292,49293,49294,49309,49310,49326,49349,49350,49351,49359,49396,49398,49441,49443,49446,49473,49474,49475,49620,49621,49650,49694,49695,49739,49753,49845,49846,49847,49855,49857,49912,49913,49958,49959,49960,50016,50017,50052,50053,50054,50065,50102,50103,50114,50115,50122,50156,50157,50229,50235,50236,50269,50324,50325,50365,50438,50439,50440,50622,50623,50624,50648,50649,50652,50655,50656,50740,50741,50742,50843,50846,50847,50935,50938,50940,50941,50942,50943,50944,50945,50989,50993,50994,51026,51102,51103,51128,51129,51156,51246,51248,51252,51253,51254,51261,51263,51265,51292,51298,51324,51375,51376,51379,51381,51485,51494,51495,51506,51507,51530,51531,51535,51536,51548,51549,51550,51574,51601,51602,51636,51639,51640,51707,51708,51709,51711,51713,51751,51753,51758,51780,51781,51806,51845,51846,51847,51848,51855,51857,51858,51871,51872,51873,51874,51875,51893,51924,51925,51926,51966,51968,52027,52029,52052,52053,52054,52061,52062,52063,52064,52070,52075,52077,52101,52102,52104,52117,52118,52119,52122,52123,52143,52184,52185"
for ($batchStart = $minEventId; $batchStart -le $maxEventId; $batchStart += $batchSize) {
    $batchEnd = [math]::Min($batchStart + $batchSize - 1, $maxEventId)

    $todayDate = Get-Date -Format "yyyy-MM-dd"
    $todayTime = Get-Date -Format "HHmmss"    
    $fileName = "msg-${pesRegion}_${custId}_messageSoftBounce_${todayDate}_${cdmsInstance}-${todayTime}-batch${batchNum}"
    $outputFile = Join-Path $backfillDir "${fileName}-raw.tsv"
    $sproc = "EXEC $custDbName.dbo.p_pes_backfill_soft_bounce_get @min_event_id=$batchStart, @max_event_id=$batchEnd, @region='$pesRegion', @camp_ids='$campIds'"
    Write-Output $sproc
    bcp $sproc QUERYOUT "$outputFile" -S $cdmsInstance -T -k -w

    if (-not (Test-Path $outputFile)) {
        Write-Output "Skipping upload: Raw file does not exist."
        continue
    }

    $fileContent = Get-Content $outputFile
    if ($fileContent.Count -le 1) {
        # Early exit if file is empty or contains only headers
        Write-Output "Skipping upload: File is empty or contains only headers."
        Remove-Item $outputFile -Force
        continue
    }

    ### Convert UTF8 No BOM
    $outputUtf8File = Join-Path $backfillDir "${fileName}.tsv"
    $Utf8NoBomEncoding = New-Object System.Text.UTF8Encoding $False
    [System.IO.File]::WriteAllLines($outputUtf8File, $fileContent, $Utf8NoBomEncoding)
    Remove-Item $outputFile -Force

    # Upload directly to S3
    $uploadResult = aws s3 cp $outputUtf8File "s3://es-loader-ue1-prod01/esl-service/incoming/${fileName}.tsv" --profile "na_backfill"
    if ($uploadResult -match "upload:") {
        Remove-Item -Path $outputUtf8File -Force
    } else {
        Write-Output "Failed to upload file: ${fileName}.tsv"
    }

    $batchNum++
}